generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String       @id @default(uuid())
  email           String       @unique
  password        String?
  name            String?
  picture         String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  phone           String?
  profileImage    String?
  username        String?
  role            String[]     @default(["user"]) @db.VarChar
  type            String[]     @default(["visitor"]) @db.VarChar
  emailVerified   DateTime?
  hashedPassword  String?
  image           String?
  accounts        Account[]
  bookings        Booking[]
  farm            FarmProfile?
  favorites       Favorite[]
  jobs            JobOpening[]
  like            Like[]
  MediaFile       MediaFile[]
  reviewsReceived Review[]     @relation("ReviewedToReview")
  reviewsGiven    Review[]     @relation("ReviewerToReview")
  sessions        Session[]
  tweet           Tweet[]

  @@index([id, name, phone])
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  userId       String?
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tweet {
  id         String      @id @default(uuid())
  text       String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  authorId   String
  replyToId  String?
  author     User        @relation(fields: [authorId], references: [id])
  replyTo    Tweet?      @relation("replies", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies    Tweet[]     @relation("replies")
  mediaFiles MediaFile[] @relation("MediaFileToTweet")
}

model MediaFile {
  id               String        @id @default(uuid())
  url              String
  providerPublicId String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  propertyId       String?
  authorId         String
  like             Like[]        @relation("MediaLike")
  author           User          @relation(fields: [authorId], references: [id])
  FarmProfile      FarmProfile[] @relation("FarmProfileToMediaFile")
  Product          Product[]     @relation("MediaFileToProduct")
  Tweet            Tweet[]       @relation("MediaFileToTweet")
}

model FarmProfile {
  id            String         @id @default(uuid())
  userId        String         @unique
  name          String
  location      String
  latitude      Float
  longitude     Float
  pictures      String[]
  createdAt     DateTime       @default(now())
  email         String?
  phone         String?
  description   Json?
  farmSlug      String         @unique
  bookings      Booking[]
  createdEvents Event[]        @relation("CreatedEvents")
  activities    FarmActivity[]
  user          User           @relation(fields: [userId], references: [id])
  favorites     Favorite[]
  jobs          JobOpening[]
  products      Product[]
  mediaFiles    MediaFile[]    @relation("FarmProfileToMediaFile")

  @@index([id, name, email, phone, location, latitude, longitude])
}

model Activity {
  id        String         @id @default(uuid())
  createdAt DateTime       @default(now())
  name      Json
  farms     FarmActivity[]
}

model FarmActivity {
  id         String      @id @default(uuid())
  farmId     String
  createdAt  DateTime    @default(now())
  activityId String
  activity   Activity    @relation(fields: [activityId], references: [id])
  farm       FarmProfile @relation(fields: [farmId], references: [id])
}

model Product {
  id          String      @id @default(uuid())
  farmId      String
  price       Decimal
  pictures    String[]
  createdAt   DateTime    @default(now())
  name        Json
  description Json?
  farm        FarmProfile @relation(fields: [farmId], references: [id])
  mediaFiles  MediaFile[] @relation("MediaFileToProduct")
}

model Booking {
  id        String      @id @default(uuid())
  userId    String
  farmId    String
  date      DateTime
  createdAt DateTime    @default(now())
  farm      FarmProfile @relation(fields: [farmId], references: [id])
  user      User        @relation(fields: [userId], references: [id])
}

model JobOpening {
  id          String      @id @default(uuid())
  farmId      String
  userId      String?
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime    @default(now())
  title       Json
  description Json?
  farm        FarmProfile @relation(fields: [farmId], references: [id])
  user        User?       @relation(fields: [userId], references: [id])
}

model Review {
  id         String   @id @default(uuid())
  rating     Int      @default(1)
  pictures   String[]
  reviewerId String
  reviewedId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  content    Json?
  reviewed   User     @relation("ReviewedToReview", fields: [reviewedId], references: [id])
  reviewer   User     @relation("ReviewerToReview", fields: [reviewerId], references: [id])
}

model Event {
  id            String      @id @default(uuid())
  date          DateTime
  location      String
  latitude      Float
  longitude     Float
  creatorFarmId String
  createdAt     DateTime    @default(now())
  name          Json
  description   Json?
  creatorFarm   FarmProfile @relation("CreatedEvents", fields: [creatorFarmId], references: [id])
}

model Favorite {
  id        String      @id @default(uuid())
  userId    String
  farmId    String
  createdAt DateTime    @default(now())
  farm      FarmProfile @relation(fields: [farmId], references: [id])
  user      User        @relation(fields: [userId], references: [id])
}

model Like {
  id        Int       @id @default(autoincrement())
  likableId String
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  Media     MediaFile @relation("MediaLike", fields: [likableId], references: [id], map: "media_likableId")
}
